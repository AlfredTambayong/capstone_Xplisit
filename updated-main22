{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of main22",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kgoldra/capstone_Xplisit/blob/main/updated-main22\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-tE649_CgBoO"
      },
      "source": [
        "import os\n",
        "import zipfile\n",
        "import random\n",
        "import tensorflow as tf\n",
        "import shutil\n",
        "import keras_preprocessing\n",
        "from keras_preprocessing import image\n",
        "from keras_preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "from shutil import copyfile\n",
        "from os import getcwd\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "\n"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ru3j8XPTtlaF"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AD_YJZWstmvN"
      },
      "source": [
        "path_nails = f\"/content/archive.zip\"\n",
        "\n",
        "local_zip = path_nails\n",
        "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
        "zip_ref.extractall('/content/')\n",
        "zip_ref.close()"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TrTuP_ik0xAY",
        "outputId": "db9449b3-eabd-4b85-8354-4accda221e81"
      },
      "source": [
        "print(len(os.listdir(\"/content/nail diseases/Darier's disease\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/Muehrck-e's lines\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/aloperia areata\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/beau's lines\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/bluish nail\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/clubbing\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/eczema\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/half and half nailes (Lindsay's nails)\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/koilonychia\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/leukonychia\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/onycholycis\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/pale nail\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/red lunula\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/splinter hemmorrage\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/terry's nail\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/white nail\")))\n",
        "print(len(os.listdir(\"/content/nail diseases/yellow nails\")))\n"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "47\n",
            "33\n",
            "47\n",
            "42\n",
            "50\n",
            "40\n",
            "45\n",
            "38\n",
            "38\n",
            "31\n",
            "50\n",
            "35\n",
            "15\n",
            "62\n",
            "36\n",
            "19\n",
            "27\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dVlSGWoQwziY"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tsyTVqA40flJ"
      },
      "source": [
        "# New Section"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AIBTDJtmw7Ih"
      },
      "source": [
        "import os\n",
        "import zipfile\n",
        "\n",
        "\n",
        "try:\n",
        "    os.makedirs(\"/content/Data/training\")\n",
        "    os.makedirs(\"/content/Data/testing\")\n",
        "    os.makedirs(\"/content/Data/training/aloperia areata\")\n",
        "    os.makedirs(\"/content/Data/training/beau's lines\")\n",
        "    os.makedirs(\"/content/Data/training/bluish nail\")\n",
        "    os.makedirs(\"/content/Data/training/clubbing\")\n",
        "    os.makedirs(\"/content/Data/training/Darier's disease\")\n",
        "    os.makedirs(\"/content/Data/training/eczema\")\n",
        "    os.makedirs(\"/content/Data/training/lindsay's nails\")\n",
        "    os.makedirs(\"/content/Data/training/koilonychia\")\n",
        "    os.makedirs(\"/content/Data/training/leukonychia\")\n",
        "    os.makedirs(\"/content/Data/training/Muehrck-e's lines\")\n",
        "    os.makedirs(\"/content/Data/training/onycholycis\")\n",
        "    os.makedirs(\"/content/Data/training/pale nail\")\n",
        "    os.makedirs(\"/content/Data/training/red lunula\")\n",
        "    os.makedirs(\"/content/Data/training/splinter hemmorrage\")\n",
        "    os.makedirs(\"/content/Data/training/terry's nail\")\n",
        "    os.makedirs(\"/content/Data/training/white nail\")\n",
        "    os.makedirs(\"/content/Data/training/yellow nails\")\n",
        "    os.makedirs(\"/content/Data/testing/aloperia areata\")\n",
        "    os.makedirs(\"/content/Data/testing/beau's lines\")\n",
        "    os.makedirs(\"/content/Data/testing/bluish nail\")\n",
        "    os.makedirs(\"/content/Data/testing/clubbing\")\n",
        "    os.makedirs(\"/content/Data/testing/Darier's disease\")\n",
        "    os.makedirs(\"/content/Data/testing/eczema\")\n",
        "    os.makedirs(\"/content/Data/testing/lindsay's nails\")\n",
        "    os.makedirs(\"/content/Data/testing/koilonychia\")\n",
        "    os.makedirs(\"/content/Data/testing/leukonychia\")\n",
        "    os.makedirs(\"/content/Data/testing/Muehrck-e's lines\")\n",
        "    os.makedirs(\"/content/Data/testing/onycholycis\")\n",
        "    os.makedirs(\"/content/Data/testing/pale nail\")\n",
        "    os.makedirs(\"/content/Data/testing/red lunula\")\n",
        "    os.makedirs(\"/content/Data/testing/splinter hemmorrage\")\n",
        "    os.makedirs(\"/content/Data/testing/terry's nail\")\n",
        "    os.makedirs(\"/content/Data/testing/white nail\")\n",
        "    os.makedirs(\"/content/Data/testing/yellow nails\")\n",
        "except OSError:\n",
        "  pass\n"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iAMe8DqK2RaH"
      },
      "source": [
        "def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n",
        "    files = []\n",
        "    for filename in os.listdir(SOURCE):\n",
        "        file = SOURCE + filename\n",
        "        if os.path.getsize(file) > 0:\n",
        "            files.append(filename)\n",
        "        else:\n",
        "            print(filename + \" is zero length, so ignoring.\")\n",
        "    \n",
        "    training_sets = int(len(files) * SPLIT_SIZE)\n",
        "    testing_sets = int(len(files) - training_sets)\n",
        "    randomed = random.sample(files,len(files))\n",
        "    training_files = randomed[0:training_sets]\n",
        "    testing_files = randomed[:testing_sets]\n",
        "    \n",
        "    for filename in training_files:\n",
        "        source = SOURCE + filename\n",
        "        destination = TRAINING + filename\n",
        "        copyfile(source, destination)\n",
        "        \n",
        "    for filename in testing_files:\n",
        "        source = SOURCE + filename\n",
        "        destination = TESTING + filename\n",
        "        copyfile(source, destination)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bzM_lhjz2Z7-"
      },
      "source": [
        "Darier_DIR = \"/content/nail diseases/Darier's disease/\"\n",
        "TRAINING_Darier_DIR = \"/content/Data/training/Darier's disease/\"\n",
        "TESTING_Darier_DIR = \"/content/Data/testing/Darier's disease/\"\n",
        "\n",
        "Muehrck_DIR = \"/content/nail diseases/Muehrck-e's lines/\"\n",
        "TRAINING_Muehrck_DIR = \"/content/Data/training/Muehrck-e's lines/\"\n",
        "TESTING_Muehrck_DIR = \"/content/Data/testing/Muehrck-e's lines/\"\n",
        "\n",
        "aloperia_DIR = \"/content/nail diseases/aloperia areata/\"\n",
        "TRAINING_aloperia_DIR = \"/content/Data/training/aloperia areata/\"\n",
        "TESTING_aloperia_DIR = \"/content/Data/testing/aloperia areata/\"\n",
        "\n",
        "beau_DIR = \"/content/nail diseases/beau's lines/\"\n",
        "TRAINING_beau_DIR = \"/content/Data/training/beau's lines/\"\n",
        "TESTING_beau_DIR = \"/content/Data/testing/beau's lines/\"\n",
        "\n",
        "bluish_DIR = \"/content/nail diseases/bluish nail/\"\n",
        "TRAINING_bluish_DIR = \"/content/Data/training/bluish nail/\"\n",
        "TESTING_bluish_DIR = \"/content/Data/testing/bluish nail/\"\n",
        "\n",
        "clubbing_DIR = \"/content/nail diseases/clubbing/\"\n",
        "TRAINING_clubbing_DIR = \"/content/Data/training/clubbing/\"\n",
        "TESTING_clubbing_DIR = \"/content/Data/testing/clubbing/\"\n",
        "\n",
        "eczema_DIR = \"/content/nail diseases/eczema/\"\n",
        "TRAINING_eczema_DIR = \"/content/Data/training/eczema/\"\n",
        "TESTING_eczema_DIR = \"/content/Data/testing/eczema/\"\n",
        "\n",
        "koilonychia_DIR = \"/content/nail diseases/koilonychia/\"\n",
        "TRAINING_koilonychia_DIR = \"/content/Data/training/koilonychia/\"\n",
        "TESTING_koilonychia_DIR = \"/content/Data/testing/koilonychia/\"\n",
        "\n",
        "leukonychia_DIR = \"/content/nail diseases/leukonychia/\"\n",
        "TRAINING_leukonychia_DIR = \"/content/Data/training/leukonychia/\"\n",
        "TESTING_leukonychia_DIR = \"/content/Data/testing/leukonychia/\"\n",
        "\n",
        "lindsay_DIR = \"/content/nail diseases/half and half nailes (Lindsay's nails)/\"\n",
        "TRAINING_lindsay_DIR = \"/content/Data/training/lindsay's nails/\"\n",
        "TESTING_lindsay_DIR = \"/content/Data/testing/lindsay's nails/\"\n",
        "\n",
        "onycholycis_DIR = \"/content/nail diseases/onycholycis/\"\n",
        "TRAINING_onycholycis_DIR = \"/content/Data/training/onycholycis/\"\n",
        "TESTING_onycholycis_DIR = \"/content/Data/testing/onycholycis/\"\n",
        "\n",
        "pale_nail_DIR = \"/content/nail diseases/pale nail/\"\n",
        "TRAINING_pale_nail_DIR = \"/content/Data/training/pale nail/\"\n",
        "TESTING_pale_nail_DIR = \"/content/Data/testing/pale nail/\"\n",
        "\n",
        "red_lunula_DIR = \"/content/nail diseases/red lunula/\"\n",
        "TRAINING_red_lunula_DIR = \"/content/Data/training/red lunula/\"\n",
        "TESTING_red_lunula_DIR = \"/content/Data/testing/red lunula/\"\n",
        "\n",
        "splinter_hemmorrage_DIR = \"/content/nail diseases/splinter hemmorrage/\"\n",
        "TRAINING_splinter_hemmorrage_DIR = \"/content/Data/training/splinter hemmorrage/\"\n",
        "TESTING_splinter_hemmorrage_DIR = \"/content/Data/testing/splinter hemmorrage/\"\n",
        "\n",
        "terry_DIR = \"/content/nail diseases/Darier's disease/\"\n",
        "TRAINING_terry_DIR = \"/content/Data/training/Darier's disease/\"\n",
        "TESTING_terry_DIR = \"/content/Data/testing/Darier's disease/\"\n",
        "\n",
        "white_DIR = \"/content/nail diseases/white nail/\"\n",
        "TRAINING_white_DIR = \"/content/Data/training/white nail/\"\n",
        "TESTING_white_DIR = \"/content/Data/testing/white nail/\"\n",
        "\n",
        "yellow_DIR = \"/content/nail diseases/yellow nails/\"\n",
        "TRAINING_yellow_DIR = \"/content/Data/training/yellow nails/\"\n",
        "TESTING_yellow_DIR = \"/content/Data/testing/yellow nails/\"\n",
        "\n",
        "\n",
        "split_size = .9\n",
        "\n",
        "\n",
        "split_data(Darier_DIR, TRAINING_Darier_DIR, TESTING_Darier_DIR, split_size)\n",
        "split_data(Muehrck_DIR, TRAINING_Muehrck_DIR, TESTING_Muehrck_DIR, split_size)\n",
        "split_data(aloperia_DIR, TRAINING_aloperia_DIR, TESTING_aloperia_DIR, split_size)\n",
        "split_data(beau_DIR, TRAINING_beau_DIR, TESTING_beau_DIR, split_size)\n",
        "split_data(bluish_DIR, TRAINING_bluish_DIR, TESTING_bluish_DIR, split_size)\n",
        "split_data(clubbing_DIR, TRAINING_clubbing_DIR, TESTING_clubbing_DIR, split_size)\n",
        "split_data(eczema_DIR, TRAINING_eczema_DIR, TESTING_eczema_DIR, split_size)\n",
        "split_data(koilonychia_DIR, TRAINING_koilonychia_DIR, TESTING_koilonychia_DIR, split_size)\n",
        "split_data(leukonychia_DIR, TRAINING_leukonychia_DIR, TESTING_leukonychia_DIR, split_size)\n",
        "split_data(lindsay_DIR, TRAINING_lindsay_DIR, TESTING_lindsay_DIR, split_size)\n",
        "split_data(onycholycis_DIR, TRAINING_onycholycis_DIR, TESTING_onycholycis_DIR, split_size)\n",
        "split_data(pale_nail_DIR, TRAINING_pale_nail_DIR, TESTING_pale_nail_DIR, split_size)\n",
        "split_data(red_lunula_DIR, TRAINING_red_lunula_DIR, TESTING_red_lunula_DIR, split_size)\n",
        "split_data(splinter_hemmorrage_DIR, TRAINING_splinter_hemmorrage_DIR, TESTING_splinter_hemmorrage_DIR, split_size)\n",
        "split_data(terry_DIR, TRAINING_terry_DIR, TESTING_terry_DIR, split_size)\n",
        "split_data(white_DIR, TRAINING_white_DIR, TESTING_white_DIR, split_size)\n",
        "split_data(yellow_DIR, TRAINING_yellow_DIR, TESTING_yellow_DIR, split_size)\n",
        "\n",
        "\n"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R4g2NKzq7-F9",
        "outputId": "0e7892a8-4881-4b8a-ecd5-9745e0cce5ae"
      },
      "source": [
        "print(len(os.listdir(\"/content/Data/testing/Muehrck-e's lines\")))\n",
        "print(len(os.listdir(\"/content/Data/training/Muehrck-e's lines\")))\n",
        "\n"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "4\n",
            "29\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r4HmNly5g4Um",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3ca4787-b0fd-4281-deae-7935493847b1"
      },
      "source": [
        "TRAINING_DIR = \"/content/Data/training/\"\n",
        "training_datagen = ImageDataGenerator(\n",
        "      rescale = 1.0/255.,\n",
        "\t    rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "VALIDATION_DIR = \"/content/Data/testing/\"\n",
        "validation_datagen = ImageDataGenerator(rescale = 1.0/255.)\n",
        "\n",
        "train_generator = training_datagen.flow_from_directory(\n",
        "\tTRAINING_DIR,\n",
        "  batch_size=32,\n",
        "\ttarget_size=(150,150),\n",
        "\tclass_mode='categorical'\n",
        ")\n",
        "\n",
        "validation_generator = validation_datagen.flow_from_directory(\n",
        "\tVALIDATION_DIR,\n",
        "  batch_size=32,\n",
        "\ttarget_size=(150,150),\n",
        "\tclass_mode='categorical'\n",
        ")\n",
        "\n",
        "model = tf.keras.models.Sequential([\n",
        "    # Note the input shape is the desired size of the image 150x150 with 3 bytes color\n",
        "    # This is the first convolution\n",
        "    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    # The second convolution\n",
        "    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "    # The third convolution\n",
        "    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "    # The fourth convolution\n",
        "    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "    # Flatten the results to feed into a DNN\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    # 512 neuron hidden layer\n",
        "    tf.keras.layers.Dense(512, activation='relu'),\n",
        "    tf.keras.layers.Dense(17, activation='softmax')\n",
        "])\n",
        "\n",
        "\n",
        "model.summary()\n",
        "\n",
        "model.compile(loss = 'categorical_crossentropy', \n",
        "              optimizer='rmsprop', \n",
        "              metrics=['accuracy'])\n",
        "\n",
        "\n",
        "history = model.fit(train_generator, \n",
        "                    epochs=100,\n",
        "                    steps_per_epoch = 556/32, \n",
        "                    validation_data=validation_generator,\n",
        "                    validation_steps=72/32)\n",
        "\n",
        "model.save(\"vegs.h5\")\n"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 556 images belonging to 17 classes.\n",
            "Found 72 images belonging to 17 classes.\n",
            "Model: \"sequential_12\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_48 (Conv2D)           (None, 148, 148, 16)      448       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_48 (MaxPooling (None, 74, 74, 16)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_49 (Conv2D)           (None, 72, 72, 32)        4640      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_49 (MaxPooling (None, 36, 36, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_50 (Conv2D)           (None, 34, 34, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_50 (MaxPooling (None, 17, 17, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_51 (Conv2D)           (None, 15, 15, 128)       73856     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_51 (MaxPooling (None, 7, 7, 128)         0         \n",
            "_________________________________________________________________\n",
            "flatten_12 (Flatten)         (None, 6272)              0         \n",
            "_________________________________________________________________\n",
            "dropout_12 (Dropout)         (None, 6272)              0         \n",
            "_________________________________________________________________\n",
            "dense_48 (Dense)             (None, 512)               3211776   \n",
            "_________________________________________________________________\n",
            "dense_49 (Dense)             (None, 17)                8721      \n",
            "=================================================================\n",
            "Total params: 3,317,937\n",
            "Trainable params: 3,317,937\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/100\n",
            "17/17 [==============================] - 12s 641ms/step - loss: 2.9445 - accuracy: 0.0548 - val_loss: 2.7415 - val_accuracy: 0.0972\n",
            "Epoch 2/100\n",
            "17/17 [==============================] - 11s 630ms/step - loss: 2.7456 - accuracy: 0.0840 - val_loss: 2.6588 - val_accuracy: 0.1528\n",
            "Epoch 3/100\n",
            "17/17 [==============================] - 11s 631ms/step - loss: 2.7317 - accuracy: 0.1097 - val_loss: 2.5570 - val_accuracy: 0.1389\n",
            "Epoch 4/100\n",
            "17/17 [==============================] - 11s 627ms/step - loss: 2.6906 - accuracy: 0.1113 - val_loss: 2.5405 - val_accuracy: 0.1389\n",
            "Epoch 5/100\n",
            "17/17 [==============================] - 11s 629ms/step - loss: 2.6171 - accuracy: 0.1591 - val_loss: 2.5046 - val_accuracy: 0.1528\n",
            "Epoch 6/100\n",
            "17/17 [==============================] - 11s 627ms/step - loss: 2.5805 - accuracy: 0.1292 - val_loss: 2.3905 - val_accuracy: 0.1944\n",
            "Epoch 7/100\n",
            "17/17 [==============================] - 11s 626ms/step - loss: 2.5448 - accuracy: 0.1836 - val_loss: 2.3409 - val_accuracy: 0.1806\n",
            "Epoch 8/100\n",
            "17/17 [==============================] - 11s 621ms/step - loss: 2.5308 - accuracy: 0.1863 - val_loss: 2.2426 - val_accuracy: 0.2639\n",
            "Epoch 9/100\n",
            "17/17 [==============================] - 11s 625ms/step - loss: 2.4698 - accuracy: 0.1789 - val_loss: 2.3447 - val_accuracy: 0.2639\n",
            "Epoch 10/100\n",
            "17/17 [==============================] - 11s 622ms/step - loss: 2.4652 - accuracy: 0.1985 - val_loss: 2.2773 - val_accuracy: 0.1111\n",
            "Epoch 11/100\n",
            "17/17 [==============================] - 11s 627ms/step - loss: 2.4430 - accuracy: 0.1999 - val_loss: 2.0866 - val_accuracy: 0.2639\n",
            "Epoch 12/100\n",
            "17/17 [==============================] - 11s 626ms/step - loss: 2.3561 - accuracy: 0.2284 - val_loss: 2.2825 - val_accuracy: 0.1944\n",
            "Epoch 13/100\n",
            "17/17 [==============================] - 11s 628ms/step - loss: 2.3379 - accuracy: 0.2731 - val_loss: 2.3171 - val_accuracy: 0.1944\n",
            "Epoch 14/100\n",
            "17/17 [==============================] - 11s 643ms/step - loss: 2.4498 - accuracy: 0.2089 - val_loss: 1.9390 - val_accuracy: 0.3611\n",
            "Epoch 15/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 2.2821 - accuracy: 0.2526 - val_loss: 1.9519 - val_accuracy: 0.3472\n",
            "Epoch 16/100\n",
            "17/17 [==============================] - 11s 655ms/step - loss: 2.2142 - accuracy: 0.2796 - val_loss: 1.8603 - val_accuracy: 0.3889\n",
            "Epoch 17/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 2.2447 - accuracy: 0.2994 - val_loss: 1.7953 - val_accuracy: 0.4583\n",
            "Epoch 18/100\n",
            "17/17 [==============================] - 11s 621ms/step - loss: 2.1756 - accuracy: 0.3004 - val_loss: 1.7225 - val_accuracy: 0.4028\n",
            "Epoch 19/100\n",
            "17/17 [==============================] - 11s 625ms/step - loss: 2.1884 - accuracy: 0.2872 - val_loss: 1.7696 - val_accuracy: 0.4583\n",
            "Epoch 20/100\n",
            "17/17 [==============================] - 11s 618ms/step - loss: 2.0600 - accuracy: 0.3236 - val_loss: 2.0269 - val_accuracy: 0.2917\n",
            "Epoch 21/100\n",
            "17/17 [==============================] - 11s 620ms/step - loss: 2.1138 - accuracy: 0.2928 - val_loss: 1.6971 - val_accuracy: 0.4306\n",
            "Epoch 22/100\n",
            "17/17 [==============================] - 11s 629ms/step - loss: 2.1093 - accuracy: 0.3108 - val_loss: 1.7311 - val_accuracy: 0.4167\n",
            "Epoch 23/100\n",
            "17/17 [==============================] - 11s 630ms/step - loss: 2.0771 - accuracy: 0.3128 - val_loss: 1.5743 - val_accuracy: 0.5417\n",
            "Epoch 24/100\n",
            "17/17 [==============================] - 11s 655ms/step - loss: 1.9719 - accuracy: 0.3754 - val_loss: 1.4987 - val_accuracy: 0.5556\n",
            "Epoch 25/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.9381 - accuracy: 0.3393 - val_loss: 1.6340 - val_accuracy: 0.5139\n",
            "Epoch 26/100\n",
            "17/17 [==============================] - 11s 644ms/step - loss: 2.0032 - accuracy: 0.3285 - val_loss: 1.8975 - val_accuracy: 0.4028\n",
            "Epoch 27/100\n",
            "17/17 [==============================] - 11s 632ms/step - loss: 1.9650 - accuracy: 0.3799 - val_loss: 1.3985 - val_accuracy: 0.5694\n",
            "Epoch 28/100\n",
            "17/17 [==============================] - 11s 623ms/step - loss: 1.9081 - accuracy: 0.3879 - val_loss: 1.4653 - val_accuracy: 0.5139\n",
            "Epoch 29/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.8966 - accuracy: 0.3917 - val_loss: 1.3898 - val_accuracy: 0.5972\n",
            "Epoch 30/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.8398 - accuracy: 0.4036 - val_loss: 1.2966 - val_accuracy: 0.6111\n",
            "Epoch 31/100\n",
            "17/17 [==============================] - 11s 617ms/step - loss: 1.8208 - accuracy: 0.4365 - val_loss: 1.2522 - val_accuracy: 0.5417\n",
            "Epoch 32/100\n",
            "17/17 [==============================] - 11s 619ms/step - loss: 1.7619 - accuracy: 0.4361 - val_loss: 1.3255 - val_accuracy: 0.5972\n",
            "Epoch 33/100\n",
            "17/17 [==============================] - 11s 625ms/step - loss: 1.7369 - accuracy: 0.4151 - val_loss: 1.3727 - val_accuracy: 0.5694\n",
            "Epoch 34/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.7926 - accuracy: 0.4099 - val_loss: 1.1561 - val_accuracy: 0.6528\n",
            "Epoch 35/100\n",
            "17/17 [==============================] - 11s 621ms/step - loss: 1.6863 - accuracy: 0.4268 - val_loss: 1.1183 - val_accuracy: 0.6528\n",
            "Epoch 36/100\n",
            "17/17 [==============================] - 11s 615ms/step - loss: 1.6606 - accuracy: 0.4533 - val_loss: 1.0402 - val_accuracy: 0.6528\n",
            "Epoch 37/100\n",
            "17/17 [==============================] - 11s 623ms/step - loss: 1.7850 - accuracy: 0.4425 - val_loss: 1.1504 - val_accuracy: 0.6250\n",
            "Epoch 38/100\n",
            "17/17 [==============================] - 11s 625ms/step - loss: 1.6078 - accuracy: 0.4466 - val_loss: 1.2241 - val_accuracy: 0.5556\n",
            "Epoch 39/100\n",
            "17/17 [==============================] - 11s 621ms/step - loss: 1.5793 - accuracy: 0.5161 - val_loss: 0.9481 - val_accuracy: 0.6944\n",
            "Epoch 40/100\n",
            "17/17 [==============================] - 11s 623ms/step - loss: 1.5661 - accuracy: 0.4981 - val_loss: 1.0175 - val_accuracy: 0.6389\n",
            "Epoch 41/100\n",
            "17/17 [==============================] - 11s 644ms/step - loss: 1.5933 - accuracy: 0.5276 - val_loss: 1.0348 - val_accuracy: 0.6667\n",
            "Epoch 42/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.6501 - accuracy: 0.4544 - val_loss: 1.1497 - val_accuracy: 0.6250\n",
            "Epoch 43/100\n",
            "17/17 [==============================] - 11s 627ms/step - loss: 1.5765 - accuracy: 0.4834 - val_loss: 0.8532 - val_accuracy: 0.7500\n",
            "Epoch 44/100\n",
            "17/17 [==============================] - 11s 628ms/step - loss: 1.4444 - accuracy: 0.5369 - val_loss: 0.7983 - val_accuracy: 0.7361\n",
            "Epoch 45/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.5940 - accuracy: 0.4468 - val_loss: 1.0841 - val_accuracy: 0.6389\n",
            "Epoch 46/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.4946 - accuracy: 0.5097 - val_loss: 0.8847 - val_accuracy: 0.7222\n",
            "Epoch 47/100\n",
            "17/17 [==============================] - 11s 620ms/step - loss: 1.2844 - accuracy: 0.5905 - val_loss: 1.1899 - val_accuracy: 0.6389\n",
            "Epoch 48/100\n",
            "17/17 [==============================] - 11s 626ms/step - loss: 1.4525 - accuracy: 0.5103 - val_loss: 1.0289 - val_accuracy: 0.6944\n",
            "Epoch 49/100\n",
            "17/17 [==============================] - 11s 652ms/step - loss: 1.4702 - accuracy: 0.5214 - val_loss: 0.6925 - val_accuracy: 0.8056\n",
            "Epoch 50/100\n",
            "17/17 [==============================] - 11s 643ms/step - loss: 1.3818 - accuracy: 0.5640 - val_loss: 0.6728 - val_accuracy: 0.8611\n",
            "Epoch 51/100\n",
            "17/17 [==============================] - 11s 621ms/step - loss: 1.2314 - accuracy: 0.6003 - val_loss: 0.9614 - val_accuracy: 0.6528\n",
            "Epoch 52/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.2837 - accuracy: 0.5659 - val_loss: 0.9263 - val_accuracy: 0.6944\n",
            "Epoch 53/100\n",
            "17/17 [==============================] - 11s 622ms/step - loss: 1.3283 - accuracy: 0.5850 - val_loss: 0.9907 - val_accuracy: 0.6111\n",
            "Epoch 54/100\n",
            "17/17 [==============================] - 11s 620ms/step - loss: 1.3959 - accuracy: 0.5389 - val_loss: 0.9750 - val_accuracy: 0.7083\n",
            "Epoch 55/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.3110 - accuracy: 0.5760 - val_loss: 0.6035 - val_accuracy: 0.8472\n",
            "Epoch 56/100\n",
            "17/17 [==============================] - 11s 617ms/step - loss: 1.2835 - accuracy: 0.5836 - val_loss: 0.6661 - val_accuracy: 0.7222\n",
            "Epoch 57/100\n",
            "17/17 [==============================] - 11s 620ms/step - loss: 1.4010 - accuracy: 0.5592 - val_loss: 0.6083 - val_accuracy: 0.7778\n",
            "Epoch 58/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.2801 - accuracy: 0.5852 - val_loss: 0.8115 - val_accuracy: 0.7222\n",
            "Epoch 59/100\n",
            "17/17 [==============================] - 11s 621ms/step - loss: 1.4228 - accuracy: 0.5381 - val_loss: 0.6854 - val_accuracy: 0.7361\n",
            "Epoch 60/100\n",
            "17/17 [==============================] - 11s 625ms/step - loss: 1.1555 - accuracy: 0.6093 - val_loss: 0.4452 - val_accuracy: 0.8472\n",
            "Epoch 61/100\n",
            "17/17 [==============================] - 11s 625ms/step - loss: 0.9712 - accuracy: 0.6779 - val_loss: 0.9238 - val_accuracy: 0.6944\n",
            "Epoch 62/100\n",
            "17/17 [==============================] - 11s 625ms/step - loss: 1.2417 - accuracy: 0.5975 - val_loss: 0.4611 - val_accuracy: 0.8472\n",
            "Epoch 63/100\n",
            "17/17 [==============================] - 11s 617ms/step - loss: 0.9634 - accuracy: 0.6890 - val_loss: 0.5969 - val_accuracy: 0.7917\n",
            "Epoch 64/100\n",
            "17/17 [==============================] - 11s 620ms/step - loss: 1.0396 - accuracy: 0.6414 - val_loss: 1.1468 - val_accuracy: 0.6111\n",
            "Epoch 65/100\n",
            "17/17 [==============================] - 11s 620ms/step - loss: 1.0970 - accuracy: 0.6381 - val_loss: 0.3753 - val_accuracy: 0.9167\n",
            "Epoch 66/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.1703 - accuracy: 0.6123 - val_loss: 0.4613 - val_accuracy: 0.8472\n",
            "Epoch 67/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.1670 - accuracy: 0.6270 - val_loss: 0.4310 - val_accuracy: 0.8472\n",
            "Epoch 68/100\n",
            "17/17 [==============================] - 11s 624ms/step - loss: 1.0251 - accuracy: 0.6801 - val_loss: 0.3831 - val_accuracy: 0.9167\n",
            "Epoch 69/100\n",
            "17/17 [==============================] - 11s 620ms/step - loss: 0.9784 - accuracy: 0.6536 - val_loss: 0.6456 - val_accuracy: 0.7778\n",
            "Epoch 70/100\n",
            "17/17 [==============================] - 11s 626ms/step - loss: 1.0971 - accuracy: 0.6317 - val_loss: 0.3777 - val_accuracy: 0.8889\n",
            "Epoch 71/100\n",
            "17/17 [==============================] - 11s 635ms/step - loss: 0.9748 - accuracy: 0.6628 - val_loss: 0.3216 - val_accuracy: 0.9167\n",
            "Epoch 72/100\n",
            "17/17 [==============================] - 11s 626ms/step - loss: 1.0850 - accuracy: 0.6914 - val_loss: 0.3466 - val_accuracy: 0.9306\n",
            "Epoch 73/100\n",
            "17/17 [==============================] - 11s 628ms/step - loss: 1.1167 - accuracy: 0.6622 - val_loss: 0.4267 - val_accuracy: 0.8611\n",
            "Epoch 74/100\n",
            "17/17 [==============================] - 11s 623ms/step - loss: 1.1465 - accuracy: 0.6037 - val_loss: 0.4287 - val_accuracy: 0.8611\n",
            "Epoch 75/100\n",
            "17/17 [==============================] - 11s 623ms/step - loss: 1.0624 - accuracy: 0.6406 - val_loss: 0.3276 - val_accuracy: 0.9028\n",
            "Epoch 76/100\n",
            "17/17 [==============================] - 11s 626ms/step - loss: 0.9700 - accuracy: 0.6818 - val_loss: 0.6018 - val_accuracy: 0.7639\n",
            "Epoch 77/100\n",
            "17/17 [==============================] - 11s 631ms/step - loss: 0.9951 - accuracy: 0.6563 - val_loss: 0.2485 - val_accuracy: 0.9306\n",
            "Epoch 78/100\n",
            "17/17 [==============================] - 11s 628ms/step - loss: 0.9372 - accuracy: 0.6880 - val_loss: 0.6211 - val_accuracy: 0.7917\n",
            "Epoch 79/100\n",
            "17/17 [==============================] - 11s 629ms/step - loss: 1.0623 - accuracy: 0.6637 - val_loss: 0.2017 - val_accuracy: 0.9861\n",
            "Epoch 80/100\n",
            "17/17 [==============================] - 11s 628ms/step - loss: 0.9954 - accuracy: 0.6878 - val_loss: 0.2398 - val_accuracy: 0.9583\n",
            "Epoch 81/100\n",
            "17/17 [==============================] - 11s 641ms/step - loss: 0.8680 - accuracy: 0.7085 - val_loss: 0.4059 - val_accuracy: 0.8889\n",
            "Epoch 82/100\n",
            "17/17 [==============================] - 11s 636ms/step - loss: 0.9424 - accuracy: 0.6810 - val_loss: 0.2340 - val_accuracy: 0.9722\n",
            "Epoch 83/100\n",
            "17/17 [==============================] - 11s 632ms/step - loss: 0.7502 - accuracy: 0.7635 - val_loss: 0.3310 - val_accuracy: 0.9028\n",
            "Epoch 84/100\n",
            "17/17 [==============================] - 11s 633ms/step - loss: 0.8630 - accuracy: 0.7285 - val_loss: 0.1732 - val_accuracy: 0.9861\n",
            "Epoch 85/100\n",
            "17/17 [==============================] - 11s 627ms/step - loss: 0.7903 - accuracy: 0.7369 - val_loss: 0.3137 - val_accuracy: 0.9167\n",
            "Epoch 86/100\n",
            "17/17 [==============================] - 11s 627ms/step - loss: 0.8739 - accuracy: 0.7255 - val_loss: 0.4935 - val_accuracy: 0.8472\n",
            "Epoch 87/100\n",
            "17/17 [==============================] - 11s 637ms/step - loss: 0.7585 - accuracy: 0.7378 - val_loss: 0.2389 - val_accuracy: 0.9167\n",
            "Epoch 88/100\n",
            "17/17 [==============================] - 11s 628ms/step - loss: 0.8846 - accuracy: 0.7253 - val_loss: 0.3756 - val_accuracy: 0.9028\n",
            "Epoch 89/100\n",
            "17/17 [==============================] - 11s 634ms/step - loss: 0.7986 - accuracy: 0.7200 - val_loss: 0.4190 - val_accuracy: 0.8333\n",
            "Epoch 90/100\n",
            "17/17 [==============================] - 11s 632ms/step - loss: 0.8246 - accuracy: 0.7381 - val_loss: 0.2841 - val_accuracy: 0.8889\n",
            "Epoch 91/100\n",
            "17/17 [==============================] - 11s 631ms/step - loss: 0.8310 - accuracy: 0.7685 - val_loss: 0.4799 - val_accuracy: 0.8194\n",
            "Epoch 92/100\n",
            "17/17 [==============================] - 11s 628ms/step - loss: 0.8553 - accuracy: 0.7405 - val_loss: 0.2042 - val_accuracy: 0.9444\n",
            "Epoch 93/100\n",
            "17/17 [==============================] - 11s 639ms/step - loss: 0.8173 - accuracy: 0.7455 - val_loss: 0.1709 - val_accuracy: 0.9722\n",
            "Epoch 94/100\n",
            "17/17 [==============================] - 11s 633ms/step - loss: 0.7972 - accuracy: 0.7383 - val_loss: 0.4303 - val_accuracy: 0.8750\n",
            "Epoch 95/100\n",
            "17/17 [==============================] - 11s 634ms/step - loss: 0.7431 - accuracy: 0.7755 - val_loss: 0.1472 - val_accuracy: 0.9583\n",
            "Epoch 96/100\n",
            "17/17 [==============================] - 11s 636ms/step - loss: 0.6493 - accuracy: 0.7910 - val_loss: 0.1292 - val_accuracy: 0.9861\n",
            "Epoch 97/100\n",
            "17/17 [==============================] - 11s 630ms/step - loss: 0.6707 - accuracy: 0.7697 - val_loss: 0.2176 - val_accuracy: 0.9306\n",
            "Epoch 98/100\n",
            "17/17 [==============================] - 11s 636ms/step - loss: 0.7670 - accuracy: 0.7298 - val_loss: 0.1789 - val_accuracy: 0.9583\n",
            "Epoch 99/100\n",
            "17/17 [==============================] - 11s 633ms/step - loss: 0.6616 - accuracy: 0.8011 - val_loss: 0.2957 - val_accuracy: 0.8889\n",
            "Epoch 100/100\n",
            "17/17 [==============================] - 11s 631ms/step - loss: 0.6234 - accuracy: 0.7957 - val_loss: 0.1300 - val_accuracy: 0.9861\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h7dUWqKrHxUq"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "bEhqLe6_Kyrq",
        "outputId": "aa7991c6-ba42-4cdf-c6c2-d0305d7f9784"
      },
      "source": [
        "def plot_train_history(history1):\n",
        "    # Summarize history for accuracy\n",
        "    plt.plot(history.history['accuracy'])\n",
        "    plt.plot(history.history['val_accuracy'])\n",
        "    plt.title('Model accuracy')\n",
        "    plt.ylabel('accuracy')\n",
        "    plt.xlabel('epoch')\n",
        "    plt.legend(['train', 'test'], loc='upper left')\n",
        "    plt.show()\n",
        "\n",
        "    # Summarize history for loss\n",
        "    plt.plot(history.history['loss'])\n",
        "    plt.plot(history.history['val_loss'])\n",
        "    plt.title('Model loss')\n",
        "    plt.ylabel('loss')\n",
        "    plt.xlabel('epoch')\n",
        "    plt.legend(['train', 'test'], loc='upper left')\n",
        "    plt.show()\n",
        "plot_train_history(history)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zCYwdiG_g2To"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "id": "B5rPUXW--LRZ",
        "outputId": "bec31ea1-9e8a-4b21-c1bb-f06bcea0e20b"
      },
      "source": [
        "import numpy as np\n",
        "from google.colab import files\n",
        "from keras.preprocessing import image\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "for fn in uploaded.keys():\n",
        " \n",
        "  # predicting images\n",
        "  path = fn\n",
        "  img = image.load_img(path, target_size=(150, 150))\n",
        "  x = image.img_to_array(img)\n",
        "  x = np.expand_dims(x, axis=0)\n",
        "\n",
        "  images = np.vstack([x])\n",
        "  classes = model.predict(images, batch_size=10)\n",
        "  print(fn)\n",
        "  print(classes)\n"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-cc5c29e4-f237-4a5b-9b76-47b54ad081e9\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-cc5c29e4-f237-4a5b-9b76-47b54ad081e9\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving 19.PNG to 19.PNG\n",
            "19.PNG\n",
            "[[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}